import time


# 0.1
def initialize_state(instance):
    return instance


# 0.2
# 1 2 3 4 5 6 7 8 *
def is_final_state(state):
    return list(state[:-1]) == list(range(1, 9))


# 0.3
def possible_moves(state, last_moved):
    # i = index pozitie libera in lista
    # last moved -> evitarea mutarii spatiului gol la pozitia anterioara
    i = state.index(0)
    moves = []

    """
        [0,1,2
        3,4,5
        6,7,8]
     """

    # Verifica dacă piesa liberă nu este pe marginea stângă -> outem scadea 1 la index
    """ x v v
        x v v
        x v v
    """
    if i % 3 != 0 and i - 1 != last_moved:
        new_state = list(state)
        new_state[i], new_state[i - 1] = new_state[i - 1], new_state[i]
        moves.append((tuple(new_state), i))

    # #Verifica dacă piesa liberă nu este pe marginea dreaptă -> putem incrementa cu 1 la index
    """
        v v x
        v v x
        v v x
    """
    if (i + 1) % 3 != 0 and i + 1 != last_moved:
        new_state = list(state)
        new_state[i], new_state[i + 1] = new_state[i + 1], new_state[i]
        moves.append((tuple(new_state), i))

    # Verifica dacă piesa liberă nu este pe rândul de sus -> putem scadea 3 la index
    """
        x x x
        v v v
        v v v
    """
    if i // 3 != 0 and i - 3 != last_moved:
        new_state = list(state)
        new_state[i], new_state[i - 3] = new_state[i - 3], new_state[i]
        # i will be the last move and we save it to avoid redudancy
        moves.append((tuple(new_state), i))

    # Verifica dacă piesa liberă nu este pe rândul de jos -> putem adauga 3 la index
    """
        v v v
        v v v
        x x x
    """
    if i // 3 != 2 and i + 3 != last_moved:
        new_state = list(state)
        new_state[i], new_state[i + 3] = new_state[i + 3], new_state[i]
        moves.append((tuple(new_state), i))

    # moves possible format: [((1, 2, 3, 0, 4, 6, 7, 5, 8), 4),  ((1, 0, 3, 4, 2, 6, 7, 5, 8), 4),  ((1, 2, 3, 4, 5, 6, 7, 0, 8), 4)]
    return moves


"""
    Realizează căutarea în adâncime limitată (DLS) pentru puzzle-ul cu 8 piese.

    Parametri:
    - node: Starea curentă a puzzle-ului.
    - depth: Adâncimea maximă la care se poate extinde căutarea.
    - last_moved: Poziția din care a fost mutată piesa liberă în ultima mișcare, utilizată pentru a evita mutările redundante.

    Întoarce:
    - O listă de stări care reprezintă soluția, sau None dacă nu s-a găsit nicio soluție la adâncimea specificată.
"""


def DLS(node, depth, last_moved=-1):
    global evaluations
    evaluations += 1
    if depth == 0 and is_final_state(node):
        return [node]
    if depth > 0:
        for child, moved in possible_moves(node, last_moved):
            path = DLS(child, depth - 1, moved)
            if path:
                return [node] + path
    return None


# 0.4
# root is the initial instance array
def IDDFS(root, max_depth):
    for depth in range(max_depth):
        path = DLS(root, depth)
        if path:
            return path
    return None


# Testing
simple_test_instances = [[1, 2, 3, 4, 5, 6, 7, 0, 8], [1, 2, 3, 4, 0, 6, 7, 5, 8], [1, 2, 3, 0, 4, 6, 7, 5, 8]]

homework_instances = [[8, 6, 7, 2, 5, 4, 0, 3, 1], [2, 5, 3, 1, 0, 6, 4, 7, 8], [2, 7, 5, 0, 8, 4, 3, 1, 6]]
for instance in homework_instances:
    print("Testing instance:", instance)
    evaluations = 0
    max_depth = 35
    start_time = time.time()
    solution = IDDFS(instance, max_depth)
    end_time = time.time()
    elapsed_time = end_time - start_time
    if solution:
        for s in solution:
            print(s)
        print("Solution found at depth:", len(solution) - 1)
        print("Total evaluations:", evaluations)
        print("Time taken:", elapsed_time, "seconds")
        print()
    else:
        print("No solution found up to depth", max_depth)
        print("Total evaluations:", evaluations)
        print("Time taken:", elapsed_time, "seconds")
        print()
